import json
import pandas as pd


class Plan:
    '''
    Class representing a treatment plan as generated by the standalone FTPP
    executable.
    '''

    def __init__(self, path: str):
        '''
        Parameters
        ----------
        path: str
            Path to the JSON file representing the plan.
        '''
        self._path = path

        with open(path, 'r') as file:
            data = json.load(file)
        self._data = data

    @property
    def spot_table(self) -> pd.DataFrame:
        '''
        Returns a table with all spots in this plan as a pandas.DataFrame.
        '''
        all_spots = []

        for field in self._data['fields']:
            spots = pd.DataFrame(field['spots'])
            spots.rename(columns={'id': 'spot_ID'}, inplace=True)

            spots['field_ID'] = field['id']
            spots['field_label'] = field['label']
            spots['gantry_angle'] = field['gantryAngle']
            spots['couch_angle'] = field['couchAngle']
            spots['nozzle_extraction'] = field['nozzleExtraction']

            all_spots.append(spots)

        all_spots = pd.concat(all_spots, ignore_index=True)
        return all_spots

    def prune_spots(self, weight_threshold: float = 1e-5):
        '''
        Remove all spots whose magnitude is below the weight_threshold from
        this plan.
        '''
        for field in self._data['fields']:
            spots = pd.DataFrame(field['spots'])
            spots.query('abs(`weight`) > @weight_threshold', inplace=True)
            field['spots'] = spots.to_dict(orient='records')

    def write_json(self, path: str = None):
        '''
        Write this plan to a JSON file at the given path. If not path is given,
        the original file is overwritten.
        '''
        if path is None:
            path = self._path

        with open(path, 'w') as file:
            json.dump(self._data, file, indent=4)
